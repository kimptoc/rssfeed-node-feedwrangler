// Generated by CoffeeScript 1.6.3
(function() {
  var RssFeedCliHandler, rssfeed;

  rssfeed = require('./rssfeed-feedwrangler');

  RssFeedCliHandler = (function() {
    function RssFeedCliHandler() {}

    RssFeedCliHandler.prototype.help = function() {
      return "Commands available:\n" + " *) help - this help\n" + " *) feeds - list of your feeds\n" + " *) feed add 'feed url' - add a feed\n" + " *) clear all - remove all feeds\n" + " *) login\n";
    };

    RssFeedCliHandler.prototype.feeds = function(args, callback) {
      var index, result;
      result = "";
      index = 1;
      return rssfeed.feeds(function(err, list) {
        var item, _i, _len;
        if (list != null) {
          for (_i = 0, _len = list.length; _i < _len; _i++) {
            item = list[_i];
            result += "" + index + ") " + item.feed_url + "\n";
            index++;
          }
        } else {
          result = "No feeds";
        }
        return typeof callback === "function" ? callback(result) : void 0;
      });
    };

    RssFeedCliHandler.prototype.feed = function(args, callback) {
      var sub_cmd;
      sub_cmd = args.shift();
      if ((sub_cmd != null) && (this[sub_cmd] != null)) {
        return this[sub_cmd](args, callback);
      } else {
        return callback("Unrecognised 'feed' sub-command: " + sub_cmd);
      }
    };

    RssFeedCliHandler.prototype.clear = function(args) {
      var sub_cmd;
      sub_cmd = args.shift();
      if ((sub_cmd != null) && sub_cmd.toLowerCase() === 'all') {
        rssfeed.clear();
        return "All feeds have been removed";
      } else {
        return "ERROR: Unrecognised clear option";
      }
    };

    RssFeedCliHandler.prototype.add = function(args) {
      return rssfeed.add(args[0], function(err) {
        if (err != null) {
          return "ERROR adding: " + args[0] + ": " + err;
        } else {
          return "added: " + args[0];
        }
      });
    };

    RssFeedCliHandler.prototype.login = function(args, callback) {
      var pass, user;
      user = args[0];
      pass = args[1];
      return rssfeed.login(user, pass, function(err) {
        if (err != null) {
          return callback("ERROR logging in: " + args[0] + ": " + err);
        } else {
          return callback("logged in: " + args[0]);
        }
      });
    };

    return RssFeedCliHandler;

  })();

  module.exports = new RssFeedCliHandler();

}).call(this);
