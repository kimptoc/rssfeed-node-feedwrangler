// Generated by CoffeeScript 1.6.3
(function() {
  var FW_CLIENT_KEY, FW_URL, RssfeedFeedwrangler, detectProxy, request, _;

  request = require('request');

  _ = require('underscore');

  detectProxy = require('./detect-proxy');

  FW_URL = 'https://feedwrangler.net/api/v2';

  FW_CLIENT_KEY = process.env.FW_CLIENT_KEY || 'No client key found';

  RssfeedFeedwrangler = (function() {
    function RssfeedFeedwrangler() {
      this.logged_in = false;
      this.access_token = void 0;
    }

    RssfeedFeedwrangler.prototype.login = function(token1, token2, callback) {
      var request_options,
        _this = this;
      request_options = {
        uri: FW_URL + "/users/authorize",
        method: "POST",
        form: {
          email: token1,
          password: token2,
          client_key: FW_CLIENT_KEY
        }
      };
      return detectProxy(request_options, function(request_options) {
        return request(request_options, function(err, res, body) {
          var e;
          if ((err != null) || !body) {
            return typeof callback === "function" ? callback(err || new Error(res.statusCode)) : void 0;
          } else {
            try {
              body = JSON.parse(body);
              if ((body.error != null) || !body.access_token) {
                return typeof callback === "function" ? callback(body.error || 'No access_token found in login response') : void 0;
              } else {
                _this.access_token = body.access_token;
                _this.logged_in = true;
                return typeof callback === "function" ? callback() : void 0;
              }
            } catch (_error) {
              e = _error;
              return typeof callback === "function" ? callback(e.message) : void 0;
            }
          }
        });
      });
    };

    RssfeedFeedwrangler.prototype.feeds = function(callback) {
      var request_options;
      request_options = {
        uri: FW_URL + "/subscriptions/list",
        method: "POST",
        form: {
          access_token: this.access_token
        }
      };
      return detectProxy(request_options, function(request_options) {
        return request(request_options, function(err, res, body) {
          var e;
          if ((err != null) || !body) {
            return typeof callback === "function" ? callback(err || new Error(res.statusCode)) : void 0;
          } else {
            try {
              body = JSON.parse(body);
              if ((body.error != null) || !body.feeds) {
                return typeof callback === "function" ? callback(body.error || 'No feeds found in response') : void 0;
              } else {
                return typeof callback === "function" ? callback(void 0, body.feeds) : void 0;
              }
            } catch (_error) {
              e = _error;
              console.log("error parsing body");
              return typeof callback === "function" ? callback(e.message) : void 0;
            }
          }
        });
      });
    };

    RssfeedFeedwrangler.prototype.add = function(feed_url, callback) {
      var request_options;
      request_options = {
        uri: FW_URL + "/subscriptions/add_feed",
        method: "POST",
        form: {
          feed_url: feed_url,
          access_token: this.access_token
        }
      };
      return detectProxy(request_options, function(request_options) {
        return request(request_options, function(err, res, body) {
          var e;
          if ((err != null) || !body) {
            return typeof callback === "function" ? callback(err || new Error(res.statusCode)) : void 0;
          } else {
            try {
              body = JSON.parse(body);
              if (body.error != null) {
                return typeof callback === "function" ? callback(body.error) : void 0;
              } else {
                return typeof callback === "function" ? callback() : void 0;
              }
            } catch (_error) {
              e = _error;
              return typeof callback === "function" ? callback(e.message) : void 0;
            }
          }
        });
      });
    };

    RssfeedFeedwrangler.prototype.requiresLogin = function() {
      return true;
    };

    RssfeedFeedwrangler.prototype.clear = function(callback) {
      return typeof callback === "function" ? callback() : void 0;
    };

    return RssfeedFeedwrangler;

  })();

  module.exports = new RssfeedFeedwrangler();

}).call(this);
